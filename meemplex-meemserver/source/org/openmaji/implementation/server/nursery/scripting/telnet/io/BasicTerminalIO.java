/* * @(#)BasicTerminalIO.java * * Copyright 2003 by Majitek Limited.  All Rights Reserved. * * This software is the proprietary information of Majitek Limited. * Use is subject to license terms. *//* ToDo: * - None, yet. *//* * This code is based upon code from the TelnetD library. * http://sourceforge.net/projects/telnetd/ * Used under the BSD license. */package org.openmaji.implementation.server.nursery.scripting.telnet.io;import java.io.OutputStream;/** * Interface that represents the supported * terminal oriented low-level I/O capabilities. *  * @author Dieter Wimberger * @version 1.0 28/09/99 */public interface BasicTerminalIO {      	/**	 * Method that retrieves Input from the underlying	 * Stream, translating Terminal specific escape 	 * sequences and returning a (constant defined) key,	 * or a character.		 *	 * @return int that represents a constant defined key.     */	 public int read();       /**	 * Method that writes a character to the terminal.	 *	 * @param ch Character that should be written on the screen     */	 public void write(char ch);   	/**	 * Method that writes a String to the terminal,	 * 	 * @param str String that should be written to the terminal.     */	 public void write(String str);       /**	 * Method that places the cursor on the terminal	 * on the given absolute position. 	 *	 * @param row Integer that represents the desired row coord.	 * @param col Integer that represents the desired column coord.     */     public void setCursor(int row, int col);       /**	 * Method that moves the cursor relative from the actual	 * position given times into a given direction.	 *	 * @param direction Constant defined integer.	 * @param times Integer that represents the desired column coord.     */     public void moveCursor(int direction, int times);       /**	 * Convenience method to move cursor to the right.	 * Wraps moveCursor method.	 * 	 * @param times Integer that represents the times the cursor should be moved.	 * @see BasicTerminalIO#moveCursor     */     public void moveRight(int times);       /**	 * Convenience method to move cursor to the left. 	 * Wraps moveCursor method.	 * 	 * @param times Integer that represents the times the cursor should be moved.	 * @see BasicTerminalIO#moveCursor     */     public void moveLeft(int times);       /**	 * Convenience method to move the cursor up.	 * Wraps moveCursor method.	 * 	 * @param times Integer that represents the times the cursor should be moved.	 * @see BasicTerminalIO#moveCursor     */     public void moveUp(int times);       /**	 * Convenience method to move the cursor down.	 * Wraps moveCursor method.		 * 	 * @param times Integer that represents the times the cursor should be moved.	 * @see BasicTerminalIO#moveCursor     */     public void moveDown(int times);       /**	 * Method that places the cursor at "home", which is defining	 * first Row,first Column.	 * Note that it might be wrapping moveCursor, or be a specific	 * Escape Sequence.     */     public void homeCursor();       /**	 * Method that stores the actual Cursor position, either client-side,	 * or if not possible server-side.	 * <em>Note:</em>	 * <ul> 	 *	<li>This method also stores the GR attributes set at cursor postion.	 *  <li>As of v1.0 this feature works only if supported on client side.	 * </ul>     */	 public void storeCursor();       /**	 * Method that restores the last Cursor position, either client-side,	 * or if not possible server-side.	 * <em>Note:</em>	 * <ul> 		 *	<li>This method also stores the GR attributes set at cursor postion.	 *  <li>As of v1.0 this feature works only if supported on client side.	 * </ul>     */	 public void restoreCursor();       /**	 * Method that erases in the line from the actual cursor position	 * to the end of the line.     */     public void eraseToEndOfLine();       /**	 * Method that erases in the actual line 	 * from the actual cursor position to the beginning of the line.     */ 	 public void eraseToBeginOfLine();   	/**	 * Method that erases the entire actual line.     */	 public void eraseLine();       /**	 * Method that erases in the terminal screen	 * from the actual cursor position to the end of the screen.     */ 	 public void eraseToEndOfScreen();    	/**	 * Method that erases in the terminal screen	 * from the actual cursor postition to the beginning of the screen.     */     public void eraseToBeginOfScreen();       /**	 * Method that erases the entire screen.	 * <em>Note:</em>	 * <ul>	 *  <li> This does not necessarily affect the actual cursor position.	 *       To ensure homing, use homeCursor() afterwards.	 * </ul>     */  	 public void eraseScreen();       /**	 * Method that sets the foreground color for writing to the terminal.	 * 	 * @param color Integer that represents one of the constant defined colors.     */	 public void setForegroundColor(int color);   	/**  	 * Method that sets the background color for writing on the terminal.	 * 	 * @param color Integer that represents one of the constant defined colors.     */     public void setBackgroundColor(int color);       /**	 * Method that sets bold as attribute for writing on the terminal.	 * The final representation on the terminal might differ by the	 * terminal type. Most likely it will be represented by extra bright characters.	 *	 * @param b Boolean that flags on/off     */	 public void setBold(boolean b);       /**	 * Method that sets italic as attribute for writing on the terminal.	 * The final representation on the terminal might differ by the	 * terminal type.	 * 	 * @param b Boolean that flags on/off     */   	 public void setItalic(boolean b);   	/**	 * Method that sets underlined as attribute for writing on the terminal.	 * The final representation on the terminal might differ by the	 * terminal type.	 * 	 * @param b Boolean that flags on/off	 */	 public void setUnderlined(boolean b);   	/** 	 * Method that sets blink attribute for writing on the terminal.	 * The final representation on the terminal might differ by the	 * terminal type.	 * 	 * @param b Boolean that flags on/off     */     public void setBlink(boolean b);   	/**  	 * Method that resets <b>all</b> graphic rendition attributes for writing on the	 * terminal.<p> 	 * <em>Note:<br>	 * This will affect all attributes. Although these selective resets are defined	 * in ECMA 048 (the successor of the ANSI X3.64 standard) they are obviously not	 * implemented for all attributes in standard terminal emulations.	 * </em>     */	 public void resetAttributes();   	/**	 * Method that sends a signal to the user. This is defined for	 * <b>ANY</b> NVT which is part of the internet protocol standard.	 * The effect on the terminal might differ by the terminal type or 	 * telnet client/terminal emulator implementation.     * @roseuid 38AF55C5036B     */     public void bell();   	/** 	 * Method that ensures all written bytes to be send over the	 * network. If autoflushing is off, this will be necessary to	 * flush buffered data already written.     */     public void flush();		/**	 * 	 */	 public void close();	 public void setTerminal(String terminalname);	 public void setDefaultTerminal();	 	 		public OutputStream getOutputStream();	/**	 * Method to retrieve the actual rows on the clients terminal	 * screen.	 *	 * @return int that represents the number of rows.	 */	 public int getRows();		/**	 * Method to retrieve the actual columns on the clients temrinal	 * screen. 	 *	 * @return int that represents the number of columns.	 */	 public int getColumns();	    		/**  	 * Mutator method for the signalling attribute.	 * 	 * @param bool Boolean that flags on(true) or off(false)     */     public void setSignalling(boolean bool);   	/** 	 * Accessor method for checking signalling attribute. 	 *  	 * @return Boolean that represents if signalling is either 	 *  turned on(true) or off(false).     */     public boolean isSignalling();   	/**	 * Mutator method for the autoflushing mechanism.	 * 	 * @param bool Boolean that flags on(true) or off(false)       */     public void setAutoflushing(boolean bool);   	/**     * Accessor method for the autoflushing mechanism. 	 *  	 * @return Boolean that represents if autoflushing is either 	 *  turned on(true) or off(false).  	 */     public boolean isAutoflushing();//Constants	/**     * Left (defining a direction on the terminal)       */     public static final int UP = 1001;       /**   	 * Right (defining a direction on the terminal)     */     public static final int DOWN = 1002;   	/** 	 * Up (defining a direction on the terminal)     */     public static final int RIGHT = 1003;   	/**	 * Down (defining a direction on the terminal)	 */     public static final int LEFT = 1004;   	/**	 * Tabulator (defining the tab key)     */	 public static final int TABULATOR = 1301;   	/** 	 * Delete (defining the del key)     */	 public static final int DELETE = 1302;       /**   	 * Backspace (defining the backspace key)     */     public static final int BACKSPACE = 1303;       /**   	 * Enter (defining the return or enter key)     */     public static final int ENTER = 10;       /** 	 * Color init (defining ctrl-a atm)     */     public static final int COLORINIT = 1304;   	/**	 * Logout request (defining ctrl-d atm)     */     public static final int LOGOUTREQUEST = 1306;   	/**     *  Black     */     public static final int BLACK = 30;       /**     *  Red     */     public static final int RED = 31;       /**     *  Green     */     public static final int GREEN = 32;       /**     *  Yellow     */     public static final int YELLOW = 33;        /**     *  Blue     */     public static final int BLUE = 34;       /**     *  Magenta     */     public static final int MAGENTA = 35;       /**     *  Cyan     */     public static final int CYAN = 36;   	/**     *  White     */     public static final int WHITE = 37;      	/**	 * CRLF (defining carriage+linebreak which is obligation)     */     public static final String CRLF = "\r\n";}//interface BasicTerminalIO