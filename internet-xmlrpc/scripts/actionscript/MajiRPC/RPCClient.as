import XMLRPC.Connection;import MajiRPC.FacetEvent;import MajiRPC.FacetHealthEvent;import MajiRPC.InboundBinding;import MajiRPC.OutboundBinding;import mx.utils.Delegate;import mx.events.EventDispatcher;[Event("facetEvent")][Event("facetHealthEvent")]/** * */class MajiRPC.RPCClient {		private static var METHOD_BEGIN:String      = "rpc.beginSession";	private static var METHOD_END:String        = "rpc.endSession";	private static var METHOD_SEND:String       = "rpc.send";	private static var METHOD_RECEIVE:String    = "rpc.receive";	private static var METHOD_REGISTER:String   = "rpc.register";	private static var METHOD_DEREGISTER:String = "rpc.deregister";	private static var METHOD_INTERRUPT:String  = "rpc.interrupt";	private var _address:String;	//	private var _inConnection : XMLRPC.Connection = null;//	private var _outConnection : XMLRPC.Connection = null;	private var _sessionId : String;	// the session identifier		private var _receiving : Boolean;	private var _interval : Number;	// the interval used for receiving events		private var _inboundBindings:Array;	private var _outboundBindings:Array; 	function addEventListener() {}; 	function removeEventListener() {};		function dispatchEvent() {};		/**	 * constructor	 */	public function RPCClient() {		// initilize this class as an event dispatcher		mx.events.EventDispatcher.initialize(this);		_sessionId = "";		_inboundBindings = [];		_outboundBindings = [];		_interval = null;		_receiving = false;	}		/**	 * Received from Bindings sending FacetEvents	 */	public function facetEvent(event:FacetEvent) : Void {		trace("sending facetEvent: " + event.meemPath + ", " + event.facetId + "." + event.method + "(" + event.args);		// send the event over XML-RPC		send(				event.meemPath,				event.facetId,				event.facetClass,				event.method,				event.args			);	}		public function addInbound(binding:InboundBinding) : Void {		trace("adding inbound to RPCClient: " + binding.MeemPath + ", " + binding.FacetId);		addEventListener("facetEvent",       binding);		addEventListener("facetHealthEvent", binding);		_inboundBindings.push(binding);				register(binding.MeemPath, binding.FacetId, binding.FacetClass);			}		public function removeInbound(binding:InboundBinding) : Void {		removeEventListener("facetEvent",       binding);		removeEventListener("facetHealthEvent", binding);				// TODO remove from list		//_inboundBindings.push(binding);		// TODO deregister if no other matching bindings rely on the same remote binding		// deregister(binding.MeemPath, binding.FacetId, binding.FacetClass);			}	public function addOutbound(binding:OutboundBinding) : Void {		addEventListener("facetHealthEvent", binding);		_outboundBindings.push(binding);				// TODO register for health events	}	public function removeOutbound(binding:OutboundBinding) : Void {		removeEventListener("facetHealthEvent", binding);		//_outboundBindings.push(binding);				// TODO register for healthe events	}	private function send(meemPath:String, facetId:String, facetClass:String, method:String, args:Array) {		// set arguments 		for (var i=0; i<args.length; i++) {			var v = args[i];			var t = typeof(v);			var type = XMLRPC.types.STRING;			if (t == new "string") {				type = XMLRPC.types.STRING;			}			else if (t == "number") {				type = XMLRPC.types.DOUBLE;			}			else if (t == "boolean") {				type = XMLRPC.types.BOOLEAN;				v = v ? '1' : '0';			}			else if (v instanceof Array) {				type = XMLRPC.types.ARRAY;			}			else {				trace("arg " + i + " of send() is unknown type: " + v);			}			args[i] = {type:type, value:v};		}		var args2 = Array( meemPath, facetId, facetClass, method, args );				invoke(METHOD_SEND, args2);	}		/* ------------------------------------ */	[Inspectable(defaultValue="http://localhost:8000/maji/rpc")]	public function get Address() : String {		return this._address;	}		public function set Address(a:String) {		trace ("setting address: " + a);				if (a != null && a != this._address) {						endSession();			this._address = a;			initialize();		}	}		public function startReceiver() : Void {		trace("Starting Receiver");		if (!_receiving) {			_receiving = true;		}		if (_interval == undefined) {			// call "receive()" at 100 ms intervals			_interval = setInterval(Delegate.create(this, receive), 1000);		}	}		public function stopReceiver() : Void {				if (_interval != undefined) {			clearInterval(_interval);			_interval = null;		}	}		private function receive() : Void {						if (_address != undefined) {			if (_interval != undefined) {				//trace("clearing interval: " + _interval);				clearInterval(_interval);				_interval = null;			}	//			trace("polling...");						// send receive command			var connection = new XMLRPC.Connection(_address);			connection.LoadFunction = Delegate.create(this, receiveResponse);			connection.OnFail = receiveFailed;			connection.AddParameter(_sessionId, XMLRPC.types.STRING);			connection.Call(METHOD_RECEIVE);		}				// send FacetEvent to listeners	}		private function receiveResponse(r:Object) {//		trace('receive(): RPC server returned: ' + r);		/*			trace ( "Got inbound facet event: " + 				r.eventType + ", " +				r.meemPath + ", " +				r.facetId + ", " +				r['class'] + ", " +				r.method + ", " +				r.params			);		*/				if (r.error != undefined) {			stopReceiver();			beginSession();			return;		}		if (_receiving && (_interval == undefined) ) {			// call "receive()" at 100 ms intervals			_interval = setInterval(Delegate.create(this, receive), 10);		}		if (r.eventType == "FacetEvent") {			// send facet event			var eventObject:Object = {target:this, type:'facetEvent'};  			eventObject.meemPath = r.meemPath;			eventObject.facetId  = r.facetId;			eventObject.facetClass = r['class'];			eventObject.method   = r.method;			eventObject.args     = r.params;						//trace("dispatching event for meem: " + r.meemPath)			dispatchEvent(eventObject);		// dispatch the event		}		else if (r.eventType == "FacetHealthEvent") {			//trace("Got facet health event '" + r.meemPath + "': lcs=" + r.lifeCyceState + ", bs=" + r.bindingState);			var eventObject:Object = {target:this, type:'facetHealthEvent'};  			eventObject.meemPath = r.meemPath;			eventObject.facetId  = r.facetId;			eventObject.facetClass = r['class'];			eventObject.lifeCyceState = r.lifeCyceState; 			eventObject.bindingState = r.bindingState;						dispatchEvent(eventObject);		// dispatch the event		}	}	function receiveFailed() : Void {		if (_receiving && (_interval == undefined) ) {			// call "receive()" at 100 ms intervals			_interval = setInterval(Delegate.create(this, receive), 1000);		}		trace("receive() failed");	}	function sendResponse(r:Object) : Void {//		trace('send(): RPC server returned: ' + r);		if (typeof(r) == "string") {			if (r != _sessionId) {				// new session id								var oldId = _sessionId;				_sessionId = r.toString();				interrupt(oldId);			}		}	}	function sendFailed() : Void {		trace("send() failed");	}			/* ----------------------------------- */		/**	 * 	 */	function beginSession() : Void	{		if (_address == null || _address == undefined) return;		trace("calling beginSession");				var bconn = new XMLRPC.Connection(_address);		bconn.LoadFunction = Delegate.create(this, beginLoad);		bconn.OnFail = sendFailed;		trace ("calling begin with id = " + _sessionId);		bconn.AddParameter(_sessionId, XMLRPC.types.STRING);		var r = bconn.Call("rpc.beginSession");	}			/**	 *	 */	private function beginLoad(r : Object) : Void {//		trace("got begin() result: " + r.toString());		// reset the LoadFunction		var id:String = r.toString();				if ( id != null && id != "" ) {						// NOTE "this" is now the 'Connection' object			//			trace("setting _sessionId: " + id);		    var oldId = this._sessionId;			_sessionId = id;						stopReceiver();			if (oldId && oldId != "") {				interrupt(oldId);		// interrupt the request on the old id			}						registerInterest();		// register interest in facets outbound from server			startReceiver();			trace( "session now " + this._sessionId);		}	}		/**	 * 	 */	function endSession() : Void {		trace("calling endSession");		var econn = new XMLRPC.Connection(_address);		econn.LoadFunction = Delegate.create(this, sendResponse);		econn.OnFail = sendFailed;		econn.AddParameter(this._sessionId, XMLRPC.types.STRING);		var r = econn.Call (METHOD_END);		// if result		stopReceiver();	}				/**	 * Interrupt a blocked receive call in the server	 */	private function interrupt(sessionId : String) : Void {//		trace("calling interrupt");		var connection = new XMLRPC.Connection(_address);		connection.LoadFunction = Delegate.create(this, sendResponse);		connection.OnFail = sendFailed;		connection.AddParameter(sessionId, XMLRPC.types.STRING);		var r = connection.Call (METHOD_INTERRUPT);	}	private function initialize() : Void {//		trace("calling initialize");		beginSession();	}	private function registerInterest() : Void {//		trace("calling registerInterest");		for (var i=0; i<_inboundBindings.length; i++) {			var binding:InboundBinding = _inboundBindings[i];						// register interest for the {Meem, Facet} value pair			register(binding.MeemPath, binding.FacetId, binding.FacetClass);		}				// 		for (var i=0; i<_outboundBindings.length; i++) {			var binding:OutboundBinding = _outboundBindings[i];						// TODO register for FacetHealthEvents//			register(listener.MeemPath, listener.FacetId, listener.FacetClass);		}	}	public function register(meemPath:String, facetId:String, facetClass:String) : Void {//		trace ("registering interest in " + meemPath + ", " + facetId + ", " + facetClass);		var args = Array ( meemPath, facetId, facetClass );		invoke(METHOD_REGISTER, args);	}	public function deregister(meemPath:String, facetId:String) : Void {//		trace ("deregistering interest in " + meemPath + ", " + facetId);				var args = Array ( meemPath, facetId );		invoke(METHOD_DEREGISTER, args);	}	/**	 * 	 * @param method	 * @param params	 */	private function invoke(method:String, args:Array) : Boolean 	{		var result:Boolean = false;		/*		if (_address == null || !_receiving) {			trace("Could not invoke \"" + method + "\" null rpc client");			return result;		}		*/		//		trace ("invoking " + method + " with args: " + args);				var connection = new XMLRPC.Connection(_address);		connection.LoadFunction = Delegate.create(this, sendResponse);		connection.OnFail = sendFailed;				connection.AddParameter(_sessionId, XMLRPC.types.STRING);		// for each arg		for (var i=0; i<args.length; i++) {			var v = args[i];			var t = typeof(v);			var type = XMLRPC.types.STRING;			if (t == "string") {				type = XMLRPC.types.STRING;			}			else if (t == "number") {				type = XMLRPC.types.DOUBLE;			}			else if (t == "boolean") {				type = XMLRPC.types.BOOLEAN;				v = v ? '1' : '0';			}			else if (v instanceof Array) {				type = XMLRPC.types.ARRAY;			}			//			trace ("adding arg " + v + " of type " + type);			connection.AddParameter(v, type);		}				var r = connection.Call (method);		return true;	}}