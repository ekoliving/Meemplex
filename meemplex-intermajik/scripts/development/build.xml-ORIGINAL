<?xml version="1.0" encoding="UTF-8"?>
<project name="org.openmaji.intermajik" default="build" basedir=".">

  <property name="bootclasspath" value=""/>
  <property name="javacFailOnError" value="true"/>
  <property name="javacDebugInfo" value="on"/>
  <property name="javacVerbose" value="false"/>

  <target name="init">
    <property name="project.folder" value="../.."/>
    <property name="project.maji.folder" value="../../../project-maji"/>
    <property name="plugin" value="org.openmaji.intermajik"/>
    <property name="feature" value="org.openmaji.intermajik.feature"/>
    <property name="version.suffix" value="1.1.0"/>
    <!-- this is the filename that is defined in plugin.xml -->
    <property name="full.name" value="intermajik"/>
    <property name="full.name.plugin" value="${plugin}_${version.suffix}"/>
    <property name="full.name.feature" value="${feature}_${version.suffix}"/>  
    <property name="source.folder" value="${project.folder}/source"/>
    <property name="build.folder.source" value="${project.folder}/build/classes"/>
    <property name="build.folder.jars" value="${project.folder}/build/jars"/>
    <property name="build.folder.update" value="${project.folder}/build/update"/>
    <property name="build.folder.update.feature" value="${build.folder.update}/features"/>
    <property name="build.folder.update.plugin" value="${build.folder.update}/plugins"/>
    <property name="build.folder.zip" value="${project.folder}/build/zip"/>
    <property name="build.folder.javadoc" value="${project.folder}/build/javadoc"/>
    <property name="temp.folder" value="${project.folder}/temp.folder"/>
    <property environment="env"/> 
    <fail message="eclipse_home environment variable not set. Set it to the directory where you have Eclipse installed." unless="env.eclipse_home"/>
    <property name="eclipse.home" value="${env.eclipse_home}"/>    
    <property name="maji.jars.folder" value="${project.maji.folder}/build/jars"/>    
    <available file="${maji.jars.folder}" property="maji.jars.folder.exists"/>
    <execute target="set.classpath"/>
    <execute target="set.classpath.clean"/>
  </target>
  
  <target name="set.classpath" if="maji.jars.folder.exists"> 
    <path id="build.classpath">
      <fileset dir="${eclipse.home}/plugins">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${env.dir_mt_jars}">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${maji.jars.folder}">
        <include name="**/*.jar" />
      </fileset>
    </path>
  </target> 
  
  <target name="set.classpath.clean" unless="maji.jars.folder.exists"> 
    <path id="build.classpath">
      <fileset dir="${eclipse.home}/plugins">
        <include name="**/*.jar"/>
      </fileset>
      <fileset dir="${env.dir_mt_jars}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
  </target>

  <target name="clean" depends="init" description="Clean the plug-in: ${plugin} of all the classes, zips and jars created.">
    <echo message="Cleaning ${ant.project.name}"/>
    <delete dir="${build.folder.source}"/>
    <delete dir="${build.folder.jars}"/>
    <delete dir="${build.folder.update}"/>
    <delete dir="${build.folder.zip}"/>
    <delete dir="${build.folder.javadoc}"/>
  </target>

  <target name="build.source" depends="init" description="Build source.">
    <mkdir dir="${build.folder.source}"/>
    <!-- compile the source code -->
    <javac destdir="${build.folder.source}" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}">
      <classpath refid="build.classpath"/>
      <src path="${source.folder}/"/>
    </javac>
    <!-- copy necessary resources -->
    <copy todir="${build.folder.source}">
      <fileset dir="${source.folder}/" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="build.source.jar" depends="init" description="Create jar: ${full.name}.jar.">
    <antcall target="build.source"/>
    <mkdir dir="${build.folder.jars}"/>
    <jar jarfile="${build.folder.jars}/${full.name}.jar" basedir="${build.folder.source}"/>
  </target>
  
  <target name="build">
    <antcall target="build.source.jar"/>
  </target>

  <target name="build.plugin.update">
    <antcall target="build.update.plugin.jar"/>
    <antcall target="build.update.feature.jar"/>
    <antcall target="build.update.feature.plugin.jar"/>
    <ant antfile="build_jars.xml"/>
  </target>

  <target name="build.update.plugin.jar" depends="init" description="Build the plug-in: ${plugin} for an update site.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="build.source.jar"/>
    <antcall target="copy.files.plugin">
      <param name="destination.temp.folder" value="${temp.folder}/${full.name}/"/>
    </antcall>
    <mkdir dir="${build.folder.update.plugin}"/>
    <jar jarfile="${build.folder.update.plugin}/${full.name.plugin}.jar" basedir="${temp.folder}/${full.name}" filesonly="false" update="no"/>
    <delete dir="${temp.folder}"/>
  </target>

  <target name="build.update.feature.jar" depends="init" description="Build the feature: ${plugin} for an update site.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="copy.files.feature">
      <param name="destination.temp.folder" value="${temp.folder}/"/>
    </antcall>
    <mkdir dir="${build.folder.update.feature}"/>
    <jar jarfile="${build.folder.update.feature}/${full.name.feature}.jar" basedir="${temp.folder}" filesonly="false" update="no"/>
    <delete dir="${temp.folder}"/>
  </target>
  
  <target name="build.update.feature.plugin.jar" depends="init" description="Build the feature (branding)  plug-in: ${plugin} for an update site.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="copy.files.feature.plugin">
      <param name="destination.temp.folder" value="${temp.folder}/${full.name}/"/>
    </antcall>
    <mkdir dir="${build.folder.update.plugin}"/>
    <jar jarfile="${build.folder.update.plugin}/${full.name.feature}.jar" basedir="${temp.folder}/${full.name}" filesonly="false" update="no"/>
    <delete dir="${temp.folder}"/>
  </target>

  <target name="build.plugin.zip" depends="init" description="Create a zip containing all the elements for the plug-in: ${plugin}.">
    <delete dir="${temp.folder}"/>
    <mkdir dir="${temp.folder}"/>
    <antcall target="build.source.jar"/>
    <antcall target="copy.files.plugin">
      <param name="destination.temp.folder" value="${temp.folder}/plugins/${full.name.plugin}/"/>
    </antcall>
    <antcall target="copy.files.feature">
      <param name="destination.temp.folder" value="${temp.folder}/features/${full.name.plugin}/"/>
    </antcall>
    <mkdir dir="${build.folder.zip}"/>
    <zip zipfile="${build.folder.zip}/${full.name.plugin}.zip" basedir="${temp.folder}" filesonly="false" update="no"/>
    <delete dir="${temp.folder}"/>
  </target>
  
  <target name="copy.files.plugin" depends="init" if="destination.temp.folder">
    <copy file="${build.folder.jars}/${full.name}.jar" todir="${destination.temp.folder}"/>
    <copy todir="${destination.temp.folder}">
      <fileset dir="${project.folder}" includes="plugin.xml,icons/*"/>
    </copy>
    <copy todir="${destination.temp.folder}" flatten="true">
      <fileset dir="${project.folder}" includes="plugin_files/*"/>
    </copy>
  </target>
  
  <target name="copy.files.feature" depends="init" if="destination.temp.folder">
    <copy todir="${destination.temp.folder}" flatten="true">
      <fileset dir="${project.folder}" includes="feature_files/*" excludes="feature_files/plugin_files"/>
    </copy>
  </target>
  
  <target name="copy.files.feature.plugin" depends="init" if="destination.temp.folder">
    <copy todir="${destination.temp.folder}" flatten="true">
      <fileset dir="${project.folder}" includes="feature_files/plugin_files/*"/>
    </copy>
  </target>
    
  <target name="javadoc" depends="init" description="Generate Javadoc">
    <mkdir dir="${build.folder.javadoc}"/>
    <javadoc destdir="${build.folder.javadoc}" packagenames="*">
      <classpath refid="build.classpath"/>
      <sourcepath>
        <pathelement location="${source.folder}"/>
      </sourcepath>
    </javadoc>
  </target>
    
  <target name="build.all">
    <antcall target="build.source.jar"/>
    <antcall target="build.plugin.update"/>
    <antcall target="build.plugin.zip"/>
  </target>
  
  <target name="update" depends="init">
    <cvs command="update -d" dest="${project.folder}" quiet="true"/>
  </target>
  
  <target name="test" depends="build.source" description="Test Majitek Framework">
    <java classname="com.foo.Main" failonerror="true" fork="true">
      <classpath>
        <pathelement location="."/>
      </classpath>
      <!-- Pass some args, perhaps: -->
      <arg value="-myfile"/>
      <!-- Will be given as an absolute path: -->
      <arg file="myfile.txt"/>
    </java>   
  </target>
  
  <target name="getos" description="Get current operating system">        
    <condition property="isWindows">
      <os family="windows" />
    </condition>
    <condition property="isMacOsX">
      <and>
        <os family="mac" />
        <os family="unix" />
      </and>
    </condition>
    <condition property="isUnix">
      <and>
        <os family="unix" />
        <not>
          <os family="mac" />
        </not>
      </and>
    </condition>           
  </target>
  
  <target name="eclipse.setup" depends="init, getos" description="Setup eclipse project">
    <copy todir="${project.folder}" flatten="yes">
      <fileset dir="eclipse">
        <include name="unix.classpath_template" if="isUnix"/>
        <include name="windows.classpath_template" if="isWindows"/>
        <include name="macos.classpath_template" if="isMacOsX"/>
      </fileset>
    </copy>
    <move tofile="${project.folder}/.classpath">    
      <fileset dir="${project.folder}">
        <include name="*.classpath_template"/>
      </fileset>
    </move>    
    <mkdir dir="${project.folder}/lib"/>
    <copy file="${env.dir_mt_jars}/swzoo.jar" todir="${project.folder}/lib" />
  </target>
  
  <target name="eclipse.update" depends="init">    
    <copy todir="${update.root.folder}">
      <fileset dir="${build.folder.update}"/>
    </copy>
  </target>  
  
  <target name="build.site.xml" depends="init">    
    <!--
      <feature url="features/org.openmaji.intermajik_0.0.2.jar" id="org.openmaji.intermajik" version="0.0.2"/>
    -->
    <echo file="${site.xml.file}" append="true">
      &lt;feature url="features/${full.name.feature}.jar" id="${feature}" version="${version.suffix}"/&gt;
    </echo>
  </target>  
  
  <target name="prepare.install" depends="init" if="destination.folder">  
    <mkdir dir="${destination.folder}/features/${full.name.feature}"/>  
    <antcall target="copy.files.feature">
      <param name="destination.temp.folder" value="${destination.folder}/features/${full.name.feature}/"/>
    </antcall>
    <mkdir dir="${destination.folder}/plugins/${full.name.feature}"/>
    <antcall target="copy.files.feature.plugin">
      <param name="destination.temp.folder" value="${destination.folder}/plugins/${full.name.feature}/"/>
    </antcall>
    <mkdir dir="${destination.folder}/plugins/${full.name.plugin}"/>
    <antcall target="copy.files.plugin">
      <param name="destination.temp.folder" value="${destination.folder}/plugins/${full.name.plugin}/"/>
    </antcall>
    <ant antfile="build_jars.xml" target="prepare.install" inheritAll="false">
      <property name="destination.folder" value="${destination.folder}"/>
    </ant>
  </target>
  
</project>
