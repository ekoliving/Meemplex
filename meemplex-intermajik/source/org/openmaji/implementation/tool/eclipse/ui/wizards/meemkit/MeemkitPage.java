package org.openmaji.implementation.tool.eclipse.ui.wizards.meemkit;

import java.util.Hashtable;


import org.eclipse.draw2d.ColorConstants;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Text;
import org.openmaji.implementation.tool.eclipse.client.SWTClientSynchronizer;
import org.openmaji.implementation.tool.eclipse.client.security.SecurityManager;
import org.openmaji.meem.Facet;
import org.openmaji.meem.Meem;
import org.openmaji.meem.MeemPath;
import org.openmaji.meem.space.Space;
import org.openmaji.meem.wedge.error.ErrorHandler;
import org.openmaji.meem.wedge.reference.Reference;
import org.openmaji.system.gateway.ServerGateway;
import org.openmaji.system.meem.wedge.reference.ContentClient;
import org.openmaji.system.meemkit.core.MeemkitDescriptor;
import org.openmaji.system.meemkit.core.MeemkitManager;
import org.openmaji.system.meemkit.core.MeemkitManagerClient;
import org.openmaji.system.meemserver.MeemServer;


/**
 * This wizard page is used to install and uninstall meemkits. It uses a
 * MeemkitManager to perform the task of locating meemkit descriptors and
 * installing/uninstalling meemkits. This page responds asynchronously to
 * events generated by the meemkit manager.
 * 
 * @author Chris Kakris
 */

public class MeemkitPage extends WizardPage
{
  private List available;
  private List installed;
  private GridData availableGridData;
  private GridData installedGridData;
  private Text textDetails;
  private Text feedback;
  private Button installButton;
  private Button uninstallButton;
  private Composite upperPanel;
  private Composite lowerPanel;
  private Meem meemkitManagerMeem;
  private MeemkitManager meemkitManager = null;
  private MeemkitManagerClient meemkitManagerClient;
  private Facet meemkitManagerClientProxy;
  private Reference meemkitManagerClientReference;
  private ErrorHandler errorHandlerClient;
  private Facet errorHandlerClientProxy;
  private Reference errorHandlerClientReference;
  private final Hashtable descriptors = new Hashtable();

	/**
   * Constructs an instance of this wizard page and obtains a Subject
   * which is used to create a ServerGateway.
   */

  public MeemkitPage()
  {
		super("Meemkit Manager"); 
		setTitle("Meemkit Manager");

	}
  
  /**
   * Creates the topmost panel on the wizard frame and checks to see if
   * the user has logged in before adding the various user interface components.
   * 
   * @param parent  The parent to which to add the components.
   */

  public void createControl(final Composite parent)
  {
    GridLayout parentLayout = new GridLayout();
    parentLayout.numColumns = 1;
    parent.setLayout(parentLayout);
    parent.setLayoutData(new GridData(GridData.FILL_BOTH));
    setControl(parent);

    if ( SecurityManager.getInstance().getSubject() == null )
    {
      setMessage("You must be logged in before you can install any Meemkits");
      return;
    }

    if ( locateMeemkitManager() == false )
    {
      setMessage("Unable to locate the MeemkitManager Meem. Please manage Meemkits with the EdgeSystem Console");
      return;
    }

    setupUpperPanel(parent);
    setupLowerPanel(parent);
    setMessage("Select a Meemkit from one of the lists and press install or uninstall.");

    connectToMeemkitManager();
  }
  
  private ServerGateway getServerGateway() {
  	return SecurityManager.getInstance().getGateway();
  }
  
  private boolean locateMeemkitManager()
  {
    String path = MeemServer.spi.getEssentialMeemsCategoryLocation() +  "/meemkitManager";
    MeemPath meemPath = MeemPath.spi.create(Space.HYPERSPACE, path);
    meemkitManagerMeem = getServerGateway().getMeem(meemPath);
    if ( meemkitManagerMeem == null )
    {
      // This is most probably because we are running in a secondary MeemServer.
      // Until we decide how, or if, we will do this for now just tell the user
      // to go to the Primary.
      return false;
    }

    return true;
  }
  
  private void connectToMeemkitManager()
  {
    meemkitManager = (MeemkitManager) SecurityManager.getInstance().getGateway().getTarget(meemkitManagerMeem, "meemkitManager", MeemkitManager.class);

    // Setup a MeemkitManagerClient proxy

    meemkitManagerClient = new MyMeemkitManagerClient();
    meemkitManagerClientProxy = getServerGateway().getTargetFor(meemkitManagerClient,MeemkitManagerClient.class);
    meemkitManagerClientReference = Reference.spi.create("meemkitManagerClientOutput", meemkitManagerClientProxy, true, null);
    meemkitManagerMeem.addOutboundReference(meemkitManagerClientReference, false);

    // Setup an ErrorHandlerClient proxy attached to the MeemkitManager Meem

    errorHandlerClient = new MyErrorHandlerClient();
    errorHandlerClientProxy = getServerGateway().getTargetFor(errorHandlerClient,ErrorHandler.class);
    errorHandlerClientReference = Reference.spi.create("errorHandlerClient", errorHandlerClientProxy, false, null);
    meemkitManagerMeem.addOutboundReference(errorHandlerClientReference, false);
  }

  /**
   * Called when this page is no longer needed so that the MeemkitManager
   * can correctly finish.
   */

  public void cleanUp()
  {
    if ( meemkitManagerMeem == null )
    {
      // We never started up - probably because the user hadn't logged in yet
      return;
    }

    meemkitManagerMeem.removeOutboundReference(meemkitManagerClientReference);
    getServerGateway().revokeTarget(meemkitManagerClientProxy, meemkitManagerClient);

    meemkitManagerMeem.removeOutboundReference(errorHandlerClientReference);
    getServerGateway().revokeTarget(errorHandlerClientProxy, errorHandlerClient);

    meemkitManagerMeem = null;
    meemkitManager = null;
  }

  private void setupLowerPanel(Composite parent)
  {
    lowerPanel = new Composite(parent,SWT.NONE);
    GridLayout lowerLayout = new GridLayout();
    lowerLayout.numColumns = 1;
    lowerPanel.setLayout(lowerLayout);
    lowerPanel.setLayoutData(new GridData(GridData.FILL_BOTH));

    feedback = new Text(lowerPanel,SWT.MULTI|SWT.BORDER|SWT.WRAP|SWT.V_SCROLL);
    feedback.setTextLimit(Integer.MAX_VALUE);
    GridData feedbackGridData = new GridData(GridData.FILL_HORIZONTAL);
    feedbackGridData.heightHint = 50;
    feedback.setLayoutData(feedbackGridData);
    feedback.setEditable(false);
    feedback.setText("");
    Color feedbackColour = new Color(Display.getDefault(), ColorConstants.red.getRGB());
    feedback.setForeground(feedbackColour);
    parent.layout(true);
	}

  private void setupUpperPanel(Composite parent)
  {
    upperPanel = new Composite(parent, SWT.NONE);
    GridLayout layout = new GridLayout();
    layout.numColumns = 3;
    upperPanel.setLayout(layout);
    GridData gridData = new GridData(GridData.FILL_BOTH);
    gridData.heightHint = 300;
    gridData.widthHint = 600;
    upperPanel.setLayoutData(gridData);
    parent.layout(true);

    installed = new List(upperPanel,SWT.BORDER|SWT.V_SCROLL);
    installedGridData = new GridData(GridData.FILL_VERTICAL);
    installedGridData.widthHint = 100;
    installed.setLayoutData(installedGridData);
    installed.addSelectionListener(new ListSelectionListener(installed));
    installed.setToolTipText("List of installed Meemkits");

    available = new List(upperPanel,SWT.BORDER|SWT.V_SCROLL);
    availableGridData = new GridData(GridData.FILL_VERTICAL);
    availableGridData.widthHint = 100;
    available.setLayoutData(availableGridData);
    available.addSelectionListener(new ListSelectionListener(available));
    available.setToolTipText("List of available Meemkits");

    textDetails = new Text(upperPanel,SWT.MULTI|SWT.BORDER|SWT.WRAP|SWT.V_SCROLL);
    textDetails.setTextLimit(Integer.MAX_VALUE);
    textDetails.setLayoutData(new GridData(GridData.FILL_BOTH));
    textDetails.setEditable(false);
    
    uninstallButton = new Button(upperPanel,SWT.BORDER);
    uninstallButton.setText("Uninstall");
    uninstallButton.addSelectionListener(new UninstallListener());

    installButton = new Button(upperPanel,SWT.BORDER);
    installButton.setText("Install");
    installButton.addSelectionListener(new InstallListener());
  }

	private void setFeedbackError(final String message) {
		SWTClientSynchronizer.get(lowerPanel.getDisplay()).execute(new Runnable() {
			public void run() {
				feedback.setText(message);
				lowerPanel.layout();
			}
		});
	}
  
  private void clearFeedback()
  {
    setFeedbackError("");
  }

  /* ---------- helper inner classes ---------------------------------------- */

  /**
   * This inner class responds to clicks on the install button. It obtains the
   * selected meemkit descriptor and invokes the meemkit manager to install it.
   * 
   * @author Chris Kakris
   */
  private class InstallListener implements SelectionListener
  {
    public void widgetSelected(SelectionEvent event)
    {
      clearFeedback();
      int index = available.getSelectionIndex();
      if ( index == -1 )
      {
        setFeedbackError("No meemkit selected");
        return;
      }

      String meemkitName = available.getItem(index);
      meemkitManager.installMeemkit(meemkitName);
    }

    public void widgetDefaultSelected(SelectionEvent event)
    {
      widgetSelected(event);
    }
  }

  /* -------------------------------------------------------------------------------- */

  /**
   * This inner class responds to clicks on the uninstall button. It obtains the
   * selected meemkit descriptor and invokes the meemkit manager to uninstall it.
   * 
   * @author Chris Kakris
   */
  private class UninstallListener implements SelectionListener
  {
    public void widgetSelected(SelectionEvent event)
    {
      int index = installed.getSelectionIndex();
      if ( index == -1 )
      {
        setFeedbackError("No meemkit selected");
        return;
      }

      String dependeeName = installed.getItem(index);
      meemkitManager.uninstallMeemkit(dependeeName);
    }

    public void widgetDefaultSelected(SelectionEvent event)
    {
      widgetSelected(event);
    }
  }


  /* ------------------------------------------------------------------------ */

  /**
   * This inner class displays the overview of a selected meemkit into the
   * user interface.
   * 
   * @author Chris Kakris
   */
  private class ListSelectionListener implements SelectionListener
  {
    private List list;
    
    public ListSelectionListener(List list)
    {
      this.list = list;
    }

    public void widgetSelected(SelectionEvent arg)
    {
      feedback.setText("");
      if ( list.getSelectionCount() != 1 ) return;
      int index = list.getSelectionIndex();
      String meemkitName = list.getItem(index);
      MeemkitDescriptor descriptor = (MeemkitDescriptor) descriptors.get(meemkitName);
      if ( descriptor == null )
      {
        textDetails.setText("Unable to load descriptor file for this meemkit.");
      }
      else
      {
        textDetails.setText(descriptor.getOverview());
      }
    }

    public void widgetDefaultSelected(SelectionEvent arg)
    {
      widgetSelected(arg);
    }
  }

  /* ------------------------------------------------------------------------ */

  private class MyMeemkitManagerClient implements MeemkitManagerClient, ContentClient
  {
    public void meemkitInstalled(final String meemkitName)
    {
    	SWTClientSynchronizer.get(upperPanel.getDisplay()).execute(new Runnable()
      {
        public void run()
        {
          if ( installed.indexOf(meemkitName) == -1 )
          {
            installed.add(meemkitName);
          }
          if ( available.indexOf(meemkitName) != -1 )
          {
            available.remove(meemkitName);
          }
          textDetails.setText("");
          upperPanel.layout();
        }
      });
    }
    
    public void meemkitUpgraded(String meemkitName)
    {
      //TODO
    }

    public void meemkitUninstalled(final String meemkitName)
    {
    	SWTClientSynchronizer.get(upperPanel.getDisplay()).execute(new Runnable()
      {
        public void run()
        {
          installed.remove(meemkitName);
          available.add(meemkitName);
          textDetails.setText("");
          upperPanel.layout();
        }
      });
    }

    public void meemkitDescriptorsAdded(final MeemkitDescriptor[] meemkitDescriptors)
    {
    	SWTClientSynchronizer.get(upperPanel.getDisplay()).execute(new Runnable()
      {
        public void run()
        {
          for ( int i=0; i<meemkitDescriptors.length; i++ )
          {
            MeemkitDescriptor descriptor = meemkitDescriptors[i];
            String meemkitName = descriptor.getHeader().getName();
            descriptors.put(meemkitName, descriptor);
            available.add(meemkitName);
          }
        }
      });
    }

    public void meemkitDescriptorsRemoved(MeemkitDescriptor[] meemkitDescriptors)
    {
      for ( int i=0; i<meemkitDescriptors.length; i++ )
      {
        MeemkitDescriptor descriptor = meemkitDescriptors[i];
        String meemkitName = descriptor.getHeader().getName();
        descriptors.remove(meemkitName);
      }
    }

    public void contentSent()
    {
    }

    public void contentFailed(String reason)
    {
      setFeedbackError("Initial content from MeemkitManager failed: "+reason);
    }
  }

  /* ------------------------------------------------------------------------ */

  private class MyErrorHandlerClient implements ErrorHandler
  {
    public void thrown(Throwable throwable)
    {
      setFeedbackError(throwable.getMessage());
    }
  }

}
